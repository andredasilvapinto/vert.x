buildscript {
  repositories {
    if (System.getenv("VERTX_DISABLE_MAVENLOCAL") == null) {
      // We don't want to use mavenLocal when running on CI - mavenLocal is only useful in Gradle for
      // publishing artifacts locally for development purposes - maven local is also not threadsafe when there
      // are concurrent builds
      mavenLocal()
    }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
  }
  dependencies {
    classpath "com.netflix.nebula:gradle-ospackage-plugin:$ospackageVersion"
  }
}

apply plugin: 'os-package'

task buildZip(type: Zip, dependsOn: [rootProject.assemble, rootProject.minifyClient, rootProject.createDocs]) {
  group = 'vert.x'
  description 'Create the Zip distribution'

  destinationDir rootProject.file('build/distributions')
  baseName = rootProject.name
  version = rootProject.version
  from rootProject.file('build')
  include "$rootProject.name-$version/**"
}

task buildTar(type: Tar, dependsOn: [rootProject.assemble, rootProject.minifyClient, rootProject.createDocs]) {
  group = 'vert.x'
  description 'Create the GZIP distribution'

  compression = org.gradle.api.tasks.bundling.Compression.GZIP
  destinationDir rootProject.file('build/distributions')
  inputs.files rootProject.files("build/${rootProject.name}-$version")
  outputs.dir destinationDir
  baseName = rootProject.name
  version = rootProject.version
  extension = 'tar.gz'
  from rootProject.file('build')
  include "${rootProject.name}-$version/**"
}

ospackage {
  description 'Create the Rpm and Deb distributions'

  // We need this to grant the standard fulfillment for rpms:
  // "The only restriction placed on the version is that it cannot contain a dash '-'."
  // http://www.rpm.org/max-rpm/ch-rpm-file-format.html
  version = rootProject.version.replaceAll('-', '_')
  release = 1
  arch = X86_64
  os = LINUX
  type = BINARY
  user = 'vertx'
  permissionGroup = 'vertx'

  requires('java', '7', GREATER | EQUAL)

  into("/opt/vertx")

  link("/usr/bin/vertx", "/opt/vertx/bin/vertx")

  String baseBuildDir = "build/${rootProject.name}-$rootProject.version"
  from (rootProject.file(baseBuildDir)) {
    exclude 'bin'
  }

  from (rootProject.file("${baseBuildDir}/bin")) {
    into 'bin'
    exclude '*.bat'
    fileMode 0755
  }
}

buildRpm {
  dependsOn rootProject.assemble, rootProject.minifyClient, rootProject.createDocs
  destinationDir rootProject.file('build/distributions')
  packageName rootProject.name
}

buildDeb {
  dependsOn rootProject.assemble, rootProject.minifyClient, rootProject.createDocs
  destinationDir rootProject.file('build/distributions')
  packageName rootProject.name
}
